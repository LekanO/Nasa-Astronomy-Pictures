{"ast":null,"code":"var _jsxFileName = \"/Users/ant/Desktop/tests/astronomy-picture-of-the-day/src/Components/Datepick.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Datepick = () => {\n  _s();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [startDate, setStartDate] = useState(new Date());\n\n  //date formatting\n  const date = new Date(startDate);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const dateFormat = `${year}-${month}-${day}`;\n  return /*#__PURE__*/_jsxDEV(DatePicker, {\n    selected: new Date(startDate),\n    onChange: date => {\n      if (date !== null) {\n        setStartDate(date);\n      }\n      console.log(\"ggpgg\", searchParams);\n      setSearchParams({\n        date: dateFormat\n      });\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(Datepick, \"sofWTuygyWpZG5UhBNw4M3ucS4Y=\", false, function () {\n  return [useSearchParams];\n});\n_c = Datepick;\nexport default Datepick;\nvar _c;\n$RefreshReg$(_c, \"Datepick\");","map":{"version":3,"names":["useState","useSearchParams","DatePicker","jsxDEV","_jsxDEV","Datepick","_s","searchParams","setSearchParams","startDate","setStartDate","Date","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","dateFormat","selected","onChange","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ant/Desktop/tests/astronomy-picture-of-the-day/src/Components/Datepick.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.min.css\";\nimport { backdateByDays } from \"../libs/backdateByDays\";\n\nconst Datepick = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [startDate, setStartDate] = useState(new Date());\n\n  //date formatting\n  const date = new Date(startDate);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const dateFormat = `${year}-${month}-${day}`;\n\n  return (\n    <DatePicker\n      selected={new Date(startDate)}\n      onChange={(date) => {\n        if (date !== null) {\n          setStartDate(date);\n        }\n\n        console.log(\"ggpgg\", searchParams);\n        setSearchParams({ date: dateFormat });\n      }}\n    />\n  );\n};\n\nexport default Datepick;\n"],"mappings":";;AAAA,SAAoBA,QAAQ,QAAQ,OAAO;AAC3C,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,gDAAgD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,eAAe,CAAC,CAAC;EACzD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAIW,IAAI,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMC,IAAI,GAAG,IAAID,IAAI,CAACF,SAAS,CAAC;EAChC,MAAMI,IAAI,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1D,MAAMC,GAAG,GAAGH,MAAM,CAACJ,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACnD,MAAMG,UAAU,GAAG,GAAGR,IAAI,IAAIE,KAAK,IAAII,GAAG,EAAE;EAE5C,oBACEf,OAAA,CAACF,UAAU;IACToB,QAAQ,EAAE,IAAIX,IAAI,CAACF,SAAS,CAAE;IAC9Bc,QAAQ,EAAGX,IAAI,IAAK;MAClB,IAAIA,IAAI,KAAK,IAAI,EAAE;QACjBF,YAAY,CAACE,IAAI,CAAC;MACpB;MAEAY,OAAO,CAACC,GAAG,CAAC,OAAO,EAAElB,YAAY,CAAC;MAClCC,eAAe,CAAC;QAAEI,IAAI,EAAES;MAAW,CAAC,CAAC;IACvC;EAAE;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAACvB,EAAA,CAxBID,QAAQ;EAAA,QAC4BJ,eAAe;AAAA;AAAA6B,EAAA,GADnDzB,QAAQ;AA0Bd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}