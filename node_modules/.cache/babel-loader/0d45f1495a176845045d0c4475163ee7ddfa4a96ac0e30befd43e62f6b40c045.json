{"ast":null,"code":"var _jsxFileName = \"/Users/ant/Desktop/tests/astronomy-picture-of-the-day/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Outlet } from \"react-router\";\nimport { useSearchParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport { backdateByDays } from \"./libs/backdateByDays\";\nimport \"./App.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _params$get, _images$;\n  const [images, setImages] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [startDate, setStartDate] = useState(new Date());\n  const start_date = backdateByDays(6);\n  const end_date = backdateByDays(0);\n  let apiUrl = new URL(\"/planetary/apod\", process.env.REACT_APP_NASA_BASE_URL);\n  const params = new URLSearchParams(window.location.search);\n  const date = (_params$get = params.get(\"date\")) === null || _params$get === void 0 ? void 0 : _params$get.toString();\n  const fetchImages = async () => {\n    apiUrl.searchParams.append(\"api_key\", String(process.env.REACT_APP_NASA_API));\n    if (!date) {\n      apiUrl.searchParams.append(\"start_date\", start_date);\n      apiUrl.searchParams.append(\"end_date\", end_date);\n    } else {\n      apiUrl.searchParams.delete(\"start_date\");\n      apiUrl.searchParams.delete(\"end_date\");\n      apiUrl.searchParams.append(\"date\", String(date));\n    }\n    return await fetch(apiUrl.href).then(response => response).then(e => e.json()).then(e => {\n      setImages(e);\n    });\n  };\n  useEffect(() => {\n    fetchImages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"Main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Main-datepicker\",\n        children: /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: new Date(startDate),\n          onChange: date => {\n            if (!date) return;\n            fetchImages(date);\n            // if (!date) return;\n            // setStartDate(date);\n            // const dateQuery = formatDate(date);\n            // setSearchParams({ date: dateQuery });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Main-display\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"Main-image\",\n          src: (_images$ = images[5]) === null || _images$ === void 0 ? void 0 : _images$.hdurl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hB9sGSDRsh55yDx2hnJx/LFwYD8=\", false, function () {\n  return [useSearchParams];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Outlet","useSearchParams","DatePicker","backdateByDays","jsxDEV","_jsxDEV","App","_s","_params$get","_images$","images","setImages","searchParams","setSearchParams","startDate","setStartDate","Date","start_date","end_date","apiUrl","URL","process","env","REACT_APP_NASA_BASE_URL","params","URLSearchParams","window","location","search","date","get","toString","fetchImages","append","String","REACT_APP_NASA_API","delete","fetch","href","then","response","e","json","className","children","selected","onChange","fileName","_jsxFileName","lineNumber","columnNumber","src","hdurl","_c","$RefreshReg$"],"sources":["/Users/ant/Desktop/tests/astronomy-picture-of-the-day/src/App.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Outlet } from \"react-router\";\nimport { useSearchParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport { backdateByDays } from \"./libs/backdateByDays\";\nimport { formatDate } from \"./libs/formatDate\";\nimport \"./App.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\ninterface Props {\n  copyright: string;\n  date: string;\n  explanation: string;\n  hdurl: string;\n  media_type: string;\n  service_version: string;\n  title: string;\n  url: string;\n}\n\nfunction App() {\n  const [images, setImages] = useState<Props[]>([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [startDate, setStartDate] = useState(new Date());\n  const start_date = backdateByDays(6);\n  const end_date = backdateByDays(0);\n  let apiUrl = new URL(\"/planetary/apod\", process.env.REACT_APP_NASA_BASE_URL);\n\n  const params = new URLSearchParams(window.location.search);\n  const date = params.get(\"date\")?.toString();\n\n  const fetchImages = async () => {\n    apiUrl.searchParams.append(\n      \"api_key\",\n      String(process.env.REACT_APP_NASA_API)\n    );\n    if (!date) {\n      apiUrl.searchParams.append(\"start_date\", start_date);\n      apiUrl.searchParams.append(\"end_date\", end_date);\n    } else {\n      apiUrl.searchParams.delete(\"start_date\");\n      apiUrl.searchParams.delete(\"end_date\");\n      apiUrl.searchParams.append(\"date\", String(date));\n    }\n\n    return await fetch(apiUrl.href)\n      .then((response) => response)\n      .then((e) => e.json())\n      .then((e) => {\n        setImages(e);\n      });\n  };\n\n  useEffect(() => {\n    fetchImages();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <section className=\"Main\">\n        <div className=\"Main-datepicker\">\n          {/* <Datepick /> */}\n          <DatePicker\n            selected={new Date(startDate)}\n            onChange={(date) => {\n              if (!date) return;\n              fetchImages(date);\n              // if (!date) return;\n              // setStartDate(date);\n              // const dateQuery = formatDate(date);\n              // setSearchParams({ date: dateQuery });\n            }}\n          />\n        </div>\n        <div className=\"Main-display\">\n          <img className=\"Main-image\" src={images[5]?.hdurl} />\n        </div>\n      </section>\n      <Outlet />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}