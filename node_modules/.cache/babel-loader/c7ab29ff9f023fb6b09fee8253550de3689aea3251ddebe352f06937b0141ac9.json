{"ast":null,"code":"var _jsxFileName = \"/Users/ant/Desktop/tests/astronomy-picture-of-the-day/src/Components/Datepick.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Datepick = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const [image, setImage] = useState();\n  let url = new URL(\"/planetary/apod\", process.env.REACT_APP_NASA_BASE_URL);\n  url.searchParams.append(\"api_key\", String(process.env.REACT_APP_NASA_API));\n  console.log(\"url\", url);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [startDate, setStartDate] = useState(new Date());\n\n  //date formatting\n  const date = new Date(startDate);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const dateFormat = `${year}-${month}-${day}`;\n  return /*#__PURE__*/_jsxDEV(DatePicker, {\n    selected: new Date(startDate),\n    onChange: date => {\n      if (date !== null) {\n        setStartDate(date);\n        fetch(url.href).then(response => response).then(e => e.json()).then(e => {\n          if (!date) {\n            return setImages(e);\n          }\n          return setImage(e);\n        });\n      }\n      setSearchParams({\n        date: dateFormat\n      });\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(Datepick, \"qgvMvSCSDap5jI9trcU2REyL5RY=\", false, function () {\n  return [useSearchParams];\n});\n_c = Datepick;\nexport default Datepick;\nvar _c;\n$RefreshReg$(_c, \"Datepick\");","map":{"version":3,"names":["useState","useSearchParams","DatePicker","jsxDEV","_jsxDEV","Datepick","_s","images","setImages","image","setImage","url","URL","process","env","REACT_APP_NASA_BASE_URL","searchParams","append","String","REACT_APP_NASA_API","console","log","setSearchParams","startDate","setStartDate","Date","date","year","getFullYear","month","getMonth","padStart","day","getDate","dateFormat","selected","onChange","fetch","href","then","response","e","json","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ant/Desktop/tests/astronomy-picture-of-the-day/src/Components/Datepick.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.min.css\";\n\nconst Datepick = () => {\n  const [images, setImages] = useState<Props[]>([]);\n  const [image, setImage] = useState<Props>();\n  let url = new URL(\"/planetary/apod\", process.env.REACT_APP_NASA_BASE_URL);\n  url.searchParams.append(\"api_key\", String(process.env.REACT_APP_NASA_API));\n\n  console.log(\"url\", url);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [startDate, setStartDate] = useState(new Date());\n\n  //date formatting\n  const date = new Date(startDate);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const dateFormat = `${year}-${month}-${day}`;\n\n  return (\n    <DatePicker\n      selected={new Date(startDate)}\n      onChange={(date) => {\n        if (date !== null) {\n          setStartDate(date);\n          fetch(url.href)\n            .then((response) => response)\n            .then((e) => e.json())\n            .then((e) => {\n              if (!date) {\n                return setImages(e);\n              }\n              return setImage(e);\n            });\n        }\n        setSearchParams({ date: dateFormat });\n      }}\n    />\n  );\n};\n\nexport default Datepick;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,gDAAgD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAU,EAAE,CAAC;EACjD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAQ,CAAC;EAC3C,IAAIW,GAAG,GAAG,IAAIC,GAAG,CAAC,iBAAiB,EAAEC,OAAO,CAACC,GAAG,CAACC,uBAAuB,CAAC;EACzEJ,GAAG,CAACK,YAAY,CAACC,MAAM,CAAC,SAAS,EAAEC,MAAM,CAACL,OAAO,CAACC,GAAG,CAACK,kBAAkB,CAAC,CAAC;EAE1EC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEV,GAAG,CAAC;EACvB,MAAM,CAACK,YAAY,EAAEM,eAAe,CAAC,GAAGrB,eAAe,CAAC,CAAC;EACzD,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,IAAIyB,IAAI,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMC,IAAI,GAAG,IAAID,IAAI,CAACF,SAAS,CAAC;EAChC,MAAMI,IAAI,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGX,MAAM,CAACQ,IAAI,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1D,MAAMC,GAAG,GAAGd,MAAM,CAACQ,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACnD,MAAMG,UAAU,GAAG,GAAGP,IAAI,IAAIE,KAAK,IAAIG,GAAG,EAAE;EAE5C,oBACE5B,OAAA,CAACF,UAAU;IACTiC,QAAQ,EAAE,IAAIV,IAAI,CAACF,SAAS,CAAE;IAC9Ba,QAAQ,EAAGV,IAAI,IAAK;MAClB,IAAIA,IAAI,KAAK,IAAI,EAAE;QACjBF,YAAY,CAACE,IAAI,CAAC;QAClBW,KAAK,CAAC1B,GAAG,CAAC2B,IAAI,CAAC,CACZC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAAC,CAC5BD,IAAI,CAAEE,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACrBH,IAAI,CAAEE,CAAC,IAAK;UACX,IAAI,CAACf,IAAI,EAAE;YACT,OAAOlB,SAAS,CAACiC,CAAC,CAAC;UACrB;UACA,OAAO/B,QAAQ,CAAC+B,CAAC,CAAC;QACpB,CAAC,CAAC;MACN;MACAnB,eAAe,CAAC;QAAEI,IAAI,EAAEQ;MAAW,CAAC,CAAC;IACvC;EAAE;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAACxC,EAAA,CArCID,QAAQ;EAAA,QAO4BJ,eAAe;AAAA;AAAA8C,EAAA,GAPnD1C,QAAQ;AAuCd,eAAeA,QAAQ;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}